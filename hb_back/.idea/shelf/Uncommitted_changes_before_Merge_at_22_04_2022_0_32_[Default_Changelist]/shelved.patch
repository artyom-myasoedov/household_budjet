Index: src/main/java/ru/vsu/hb/service/CategoryService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.vsu.hb.service;\r\n\r\nimport com.leakyabstractions.result.Result;\r\nimport com.leakyabstractions.result.Results;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport ru.vsu.hb.dto.error.EntityNotFoundError;\r\nimport ru.vsu.hb.dto.error.HBError;\r\nimport ru.vsu.hb.persistence.entity.Category;\r\nimport ru.vsu.hb.persistence.entity.UserCategoryId;\r\nimport ru.vsu.hb.persistence.repository.CategoryRepository;\r\n\r\nimport java.util.UUID;\r\n\r\n@Service\r\npublic class CategoryService {\r\n\r\n    @Autowired\r\n    private CategoryRepository repository;\r\n\r\n    public Result<Category, HBError> getByUserCategoryId(UUID userId, String categoryName) {\r\n        return Results.ofCallable(() ->\r\n                        repository.getByUserCategoryId(new UserCategoryId(userId, categoryName))\r\n                                .orElseThrow(() -> new IllegalStateException(\"not_found\")))\r\n                .mapFailure(exception -> {\r\n                    if (exception instanceof IllegalStateException && \"not_found\".equals(exception.getMessage())) {\r\n                        return new EntityNotFoundError(\"Category: \" + categoryName + \" and userId: \" + userId + \" not found\");\r\n                    } else {\r\n                        throw new RuntimeException(exception);\r\n                    }\r\n                });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/vsu/hb/service/CategoryService.java b/src/main/java/ru/vsu/hb/service/CategoryService.java
--- a/src/main/java/ru/vsu/hb/service/CategoryService.java	(revision 40c3eb409d0284e8a3740b0787221564ae4887d4)
+++ b/src/main/java/ru/vsu/hb/service/CategoryService.java	(date 1650576015236)
@@ -4,11 +4,16 @@
 import com.leakyabstractions.result.Results;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+import ru.vsu.hb.dto.CategoryDto;
+import ru.vsu.hb.dto.TransactionDto;
+import ru.vsu.hb.dto.error.BadRequestError;
 import ru.vsu.hb.dto.error.EntityNotFoundError;
 import ru.vsu.hb.dto.error.HBError;
 import ru.vsu.hb.persistence.entity.Category;
 import ru.vsu.hb.persistence.entity.UserCategoryId;
 import ru.vsu.hb.persistence.repository.CategoryRepository;
+import ru.vsu.hb.persistence.repository.TransactionRepository;
 
 import java.util.UUID;
 
@@ -17,17 +22,64 @@
 
     @Autowired
     private CategoryRepository repository;
+    @Autowired
+    private TransactionRepository transactionRepository;
 
-    public Result<Category, HBError> getByUserCategoryId(UUID userId, String categoryName) {
+    public Result<Category, HBError> getByUserCategoryId(UUID userId, UUID categoryID) {
         return Results.ofCallable(() ->
-                        repository.getByUserCategoryId(new UserCategoryId(userId, categoryName))
-                                .orElseThrow(() -> new IllegalStateException("not_found")))
+                repository.getByUserCategoryId(new UserCategoryId(userId, categoryID))
+                        .orElseThrow(() -> new IllegalStateException("not_found")))
                 .mapFailure(exception -> {
                     if (exception instanceof IllegalStateException && "not_found".equals(exception.getMessage())) {
-                        return new EntityNotFoundError("Category: " + categoryName + " and userId: " + userId + " not found");
+                        return new EntityNotFoundError("Category: " + categoryID + " and userId: " + userId + " not found");
                     } else {
                         throw new RuntimeException(exception);
                     }
                 });
     }
+
+    @Transactional
+    public Result<CategoryDto, HBError> addCategory(CategoryDto category) {
+        return Results.ofCallable(() ->
+                CategoryDto.fromEntity(repository.save(category.toEntity())))
+                .mapFailure(exception -> {
+                    throw new RuntimeException(exception);
+                });
+    }
+
+    @Transactional
+    public Result<Integer, HBError> deleteByCategoryId(UUID categoryId) {
+        transactionRepository.deleteAllByCategoryId(categoryId);
+        return Results.success(repository.deleteByUserCategoryId_CategoryId(categoryId));
+    }
+
+    /*@Transactional
+    public Result<CategoryDto, HBError> updateCategory(CategoryDto category) {
+        var res = category.getCategoryName() == null || category.getUserId() == null ?
+                Results.success(CategoryDto.fromEntity(new Category())).mapFailure(it -> (HBError) it)
+                : getByUserCategoryId(category.getUserId(), category.getCategoryName());
+        return res.flatMapSuccess((categoryR) -> Results.ofCallable(() -> repository.getBy(transaction.getTransactionId())
+                .orElseThrow(() -> new IllegalStateException("not_found")))
+                .mapFailure(exception -> {
+                    if (exception instanceof IllegalStateException && "not_found".equals(exception.getMessage())) {
+                        return new EntityNotFoundError("Transaction with id = " + transaction.getTransactionId() + " not found");
+                    }
+                    throw new RuntimeException(exception);
+                }))
+                .flatMapSuccess(it -> Results.ofCallable(() -> {
+                            if (it.getUserId().equals(transaction.getUserId())) {
+                                return TransactionDto.fromEntity(repository.save(transaction.toEntity()));
+                            }
+                            throw new RuntimeException("bad_request");
+                        },
+                        e -> {
+                            if ("bad_request".equals(e.getMessage())) {
+                                return new BadRequestError("User with id = " + transaction.getUserId() + " doesn't have transaction with id = " + transaction.getTransactionId());
+                            }
+                            throw new RuntimeException(e);
+                        }
+                ));
+    }*/
+
+
 }
Index: src/main/java/ru/vsu/hb/service/TransactionService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.vsu.hb.service;\r\n\r\nimport com.leakyabstractions.result.Result;\r\nimport com.leakyabstractions.result.Results;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.domain.Sort;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport ru.vsu.hb.dto.SortOrder;\r\nimport ru.vsu.hb.dto.TransactionType;\r\nimport ru.vsu.hb.dto.PageDto;\r\nimport ru.vsu.hb.dto.TransactionDto;\r\nimport ru.vsu.hb.dto.error.BadRequestError;\r\nimport ru.vsu.hb.dto.error.EntityNotFoundError;\r\nimport ru.vsu.hb.dto.error.HBError;\r\nimport ru.vsu.hb.dto.request.PageRequest;\r\nimport ru.vsu.hb.dto.request.TransactionByCategoryRequest;\r\nimport ru.vsu.hb.dto.request.TransactionListRequest;\r\nimport ru.vsu.hb.persistence.entity.Category;\r\nimport ru.vsu.hb.persistence.entity.Transaction;\r\nimport ru.vsu.hb.persistence.repository.TransactionRepository;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.util.UUID;\r\nimport java.util.function.Function;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\npublic class TransactionService {\r\n\r\n    @Autowired\r\n    private TransactionRepository repository;\r\n\r\n    @Autowired\r\n    private CategoryService categoryService;\r\n\r\n    @Autowired\r\n    private UserService userService;\r\n\r\n    @Transactional\r\n    public Result<TransactionDto, HBError> addTransaction(TransactionDto transaction) {\r\n        return categoryService.getByUserCategoryId(transaction.getUserId(), transaction.getCategoryName())\r\n                .mapSuccess(it -> repository.save(transaction.toEntity()))\r\n                .mapSuccess(TransactionDto::fromEntity)\r\n                .flatMapFailure(error -> {\r\n                    if (transaction.getCategoryName() == null) {\r\n                        return userService.getDtoById(transaction.getUserId())\r\n                                .mapSuccess(user -> repository.save(transaction.toEntity()))\r\n                                .mapSuccess(TransactionDto::fromEntity);\r\n                    }\r\n                    return Results.failure(error);\r\n                });\r\n    }\r\n\r\n    @Transactional\r\n    public Result<TransactionDto, HBError> updateTransaction(TransactionDto transaction) {\r\n        var res = transaction.getCategoryName() == null ? Results.success(new Category()).mapFailure(it -> (HBError) it)\r\n                : categoryService.getByUserCategoryId(transaction.getUserId(), transaction.getCategoryName());\r\n        return res.flatMapSuccess((category) -> Results.ofCallable(() -> repository.getByTransactionId(transaction.getTransactionId())\r\n                                .orElseThrow(() -> new IllegalStateException(\"not_found\")))\r\n                        .mapFailure(exception -> {\r\n                            if (exception instanceof IllegalStateException && \"not_found\".equals(exception.getMessage())) {\r\n                                return new EntityNotFoundError(\"Transaction with id = \" + transaction.getTransactionId() + \" not found\");\r\n                            }\r\n                            throw new RuntimeException(exception);\r\n                        }))\r\n                .flatMapSuccess(it -> Results.ofCallable(() -> {\r\n                            if (it.getUserId().equals(transaction.getUserId())) {\r\n                                return TransactionDto.fromEntity(repository.save(transaction.toEntity()));\r\n                            }\r\n                            throw new RuntimeException(\"bad_request\");\r\n                        },\r\n                        e -> {\r\n                            if (\"bad_request\".equals(e.getMessage())) {\r\n                                return new BadRequestError(\"User with id = \" + transaction.getUserId() + \" doesn't have transaction with id = \" + transaction.getTransactionId());\r\n                            }\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                ));\r\n    }\r\n\r\n    @Transactional\r\n    public Result<Integer, HBError> deleteByTransactionId(UUID transactionId) {\r\n        return Results.success(repository.deleteByTransactionId(transactionId));\r\n    }\r\n\r\n    public Result<TransactionDto, HBError> getByTransactionId(UUID transactionId) {\r\n        return Results.ofCallable(() -> repository.getByTransactionId(transactionId)\r\n                        .orElseThrow(() -> new IllegalStateException(\"not_found\")))\r\n                .mapSuccess(TransactionDto::fromEntity)\r\n                .mapFailure(e -> {\r\n                    if (\"not_found\".equals(e.getMessage())) {\r\n                        return new EntityNotFoundError(\"Transaction with id = \" + transactionId + \" not found\");\r\n                    }\r\n                    throw new RuntimeException(e);\r\n                });\r\n    }\r\n\r\n    public Result<BigDecimal, HBError> getBalance(UUID userId) {\r\n        return userService.getDtoById(userId)\r\n                .mapSuccess(user -> repository.getBalance(userId));\r\n    }\r\n\r\n    public Result<PageDto<TransactionDto>, HBError> getList(TransactionListRequest request) {\r\n        return userService.getDtoById(request.getUserId())\r\n                .mapSuccess(user -> {\r\n                    if (request.getTransactionType().equals(TransactionType.ALL)) {\r\n                        return repository.findByUser_UserId(\r\n                                request.getUserId(),\r\n                                getPageable(request.getPage()));\r\n                    } else if (request.getTransactionType().equals(TransactionType.IN)) {\r\n                        return repository.findByUser_UserIdAndCategoryNameIsNull(\r\n                                request.getUserId(),\r\n                                getPageable(request.getPage()));\r\n                    } else {\r\n                        return repository.findByUser_UserIdAndCategoryNameIsNotNull(\r\n                                request.getUserId(),\r\n                                getPageable(request.getPage()));\r\n                    }\r\n                })\r\n                .mapSuccess(getPageToPageDtoFunction(request.getPage()));\r\n    }\r\n\r\n    public Result<PageDto<TransactionDto>, HBError> getByCategoryName(TransactionByCategoryRequest request) {\r\n        return categoryService.getByUserCategoryId(request.getUserId(), request.getCategoryName())\r\n                .mapSuccess(category -> repository.findByUser_UserIdAndCategoryName(\r\n                        request.getUserId(),\r\n                        request.getCategoryName(),\r\n                        getPageable(request.getPage())\r\n                ))\r\n                .mapSuccess(getPageToPageDtoFunction(request.getPage()));\r\n    }\r\n\r\n    private Sort getSort(PageRequest request) {\r\n        return Sort.by(request.getSortOrder().equals(SortOrder.ASC) ? Sort.Direction.ASC : Sort.Direction.DESC,\r\n                request.getSortField() == null ? \"createTime\" : request.getSortField());\r\n    }\r\n\r\n    private Pageable getPageable(PageRequest request) {\r\n        return org.springframework.data.domain.PageRequest.of(request.getPageNumber(), request.getLimit(), getSort(request));\r\n    }\r\n\r\n    private Function<Page<Transaction>, PageDto<TransactionDto>> getPageToPageDtoFunction(PageRequest request) {\r\n        return page -> new PageDto<>(\r\n                page.toList().stream().map(TransactionDto::fromEntity).collect(Collectors.toList()),\r\n                page.getSize(),\r\n                page.getNumber(),\r\n                page.getTotalPages(),\r\n                page.getTotalPages() > page.getSize(),\r\n                request.getSortField() == null ? \"createTime\" : request.getSortField(),\r\n                request.getSortOrder());\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/vsu/hb/service/TransactionService.java b/src/main/java/ru/vsu/hb/service/TransactionService.java
--- a/src/main/java/ru/vsu/hb/service/TransactionService.java	(revision 40c3eb409d0284e8a3740b0787221564ae4887d4)
+++ b/src/main/java/ru/vsu/hb/service/TransactionService.java	(date 1650576015305)
@@ -41,11 +41,11 @@
 
     @Transactional
     public Result<TransactionDto, HBError> addTransaction(TransactionDto transaction) {
-        return categoryService.getByUserCategoryId(transaction.getUserId(), transaction.getCategoryName())
+        return categoryService.getByUserCategoryId(transaction.getUserId(), transaction.getCategoryId())
                 .mapSuccess(it -> repository.save(transaction.toEntity()))
                 .mapSuccess(TransactionDto::fromEntity)
                 .flatMapFailure(error -> {
-                    if (transaction.getCategoryName() == null) {
+                    if (transaction.getCategoryId() == null) {
                         return userService.getDtoById(transaction.getUserId())
                                 .mapSuccess(user -> repository.save(transaction.toEntity()))
                                 .mapSuccess(TransactionDto::fromEntity);
@@ -56,8 +56,8 @@
 
     @Transactional
     public Result<TransactionDto, HBError> updateTransaction(TransactionDto transaction) {
-        var res = transaction.getCategoryName() == null ? Results.success(new Category()).mapFailure(it -> (HBError) it)
-                : categoryService.getByUserCategoryId(transaction.getUserId(), transaction.getCategoryName());
+        var res = transaction.getCategoryId() == null ? Results.success(new Category()).mapFailure(it -> (HBError) it)
+                : categoryService.getByUserCategoryId(transaction.getUserId(), transaction.getCategoryId());
         return res.flatMapSuccess((category) -> Results.ofCallable(() -> repository.getByTransactionId(transaction.getTransactionId())
                                 .orElseThrow(() -> new IllegalStateException("not_found")))
                         .mapFailure(exception -> {
@@ -111,11 +111,11 @@
                                 request.getUserId(),
                                 getPageable(request.getPage()));
                     } else if (request.getTransactionType().equals(TransactionType.IN)) {
-                        return repository.findByUser_UserIdAndCategoryNameIsNull(
+                        return repository.findByUser_UserIdAndCategoryIdIsNull(
                                 request.getUserId(),
                                 getPageable(request.getPage()));
                     } else {
-                        return repository.findByUser_UserIdAndCategoryNameIsNotNull(
+                        return repository.findByUser_UserIdAndCategoryIdIsNotNull(
                                 request.getUserId(),
                                 getPageable(request.getPage()));
                     }
@@ -124,10 +124,10 @@
     }
 
     public Result<PageDto<TransactionDto>, HBError> getByCategoryName(TransactionByCategoryRequest request) {
-        return categoryService.getByUserCategoryId(request.getUserId(), request.getCategoryName())
-                .mapSuccess(category -> repository.findByUser_UserIdAndCategoryName(
+        return categoryService.getByUserCategoryId(request.getUserId(), request.getCategoryId())
+                .mapSuccess(category -> repository.findByUser_UserIdAndCategoryId(
                         request.getUserId(),
-                        request.getCategoryName(),
+                        request.getCategoryId(),
                         getPageable(request.getPage())
                 ))
                 .mapSuccess(getPageToPageDtoFunction(request.getPage()));
Index: src/main/java/ru/vsu/hb/dto/TransactionDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.vsu.hb.dto;\r\n\r\nimport ru.vsu.hb.persistence.entity.Transaction;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.time.LocalDateTime;\r\nimport java.util.UUID;\r\n\r\npublic class TransactionDto {\r\n\r\n    private UUID transactionId;\r\n\r\n    private UUID userId;\r\n\r\n    private BigDecimal sum;\r\n\r\n    private LocalDateTime createTime;\r\n\r\n    private String description;\r\n\r\n    private String categoryName;\r\n\r\n    public TransactionDto() {\r\n    }\r\n\r\n    public TransactionDto(UUID transactionId, UUID userId, BigDecimal sum, LocalDateTime createTime, String description, String categoryName) {\r\n        this.transactionId = transactionId;\r\n        this.userId = userId;\r\n        this.sum = sum;\r\n        this.createTime = createTime;\r\n        this.description = description;\r\n        this.categoryName = categoryName;\r\n    }\r\n\r\n    public UUID getTransactionId() {\r\n        return transactionId;\r\n    }\r\n\r\n    public void setTransactionId(UUID transactionId) {\r\n        this.transactionId = transactionId;\r\n    }\r\n\r\n    public void setUserId(UUID userId) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public void setSum(BigDecimal sum) {\r\n        this.sum = sum;\r\n    }\r\n\r\n    public void setCreateTime(LocalDateTime createTime) {\r\n        this.createTime = createTime;\r\n    }\r\n\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    public void setCategoryName(String categoryName) {\r\n        this.categoryName = categoryName;\r\n    }\r\n\r\n    public UUID getUserId() {\r\n        return userId;\r\n    }\r\n\r\n    public BigDecimal getSum() {\r\n        return sum;\r\n    }\r\n\r\n    public LocalDateTime getCreateTime() {\r\n        return createTime;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    public String getCategoryName() {\r\n        return categoryName;\r\n    }\r\n\r\n    public Transaction toEntity() {\r\n        return new Transaction(transactionId,\r\n                userId,\r\n                sum,\r\n                createTime,\r\n                description,\r\n                categoryName);\r\n    }\r\n\r\n    public static TransactionDto fromEntity(Transaction transaction) {\r\n        return new TransactionDto(transaction.getTransactionId(),\r\n                transaction.getUserId(),\r\n                transaction.getSum(),\r\n                transaction.getCreateTime(),\r\n                transaction.getDescription(),\r\n                transaction.getCategoryName());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/vsu/hb/dto/TransactionDto.java b/src/main/java/ru/vsu/hb/dto/TransactionDto.java
--- a/src/main/java/ru/vsu/hb/dto/TransactionDto.java	(revision 40c3eb409d0284e8a3740b0787221564ae4887d4)
+++ b/src/main/java/ru/vsu/hb/dto/TransactionDto.java	(date 1650576015314)
@@ -18,18 +18,18 @@
 
     private String description;
 
-    private String categoryName;
+    private UUID categoryId;
 
     public TransactionDto() {
     }
 
-    public TransactionDto(UUID transactionId, UUID userId, BigDecimal sum, LocalDateTime createTime, String description, String categoryName) {
+    public TransactionDto(UUID transactionId, UUID userId, BigDecimal sum, LocalDateTime createTime, String description, UUID categoryId) {
         this.transactionId = transactionId;
         this.userId = userId;
         this.sum = sum;
         this.createTime = createTime;
         this.description = description;
-        this.categoryName = categoryName;
+        this.categoryId = categoryId;
     }
 
     public UUID getTransactionId() {
@@ -56,8 +56,8 @@
         this.description = description;
     }
 
-    public void setCategoryName(String categoryName) {
-        this.categoryName = categoryName;
+    public void setCategoryId(UUID categoryId) {
+        this.categoryId = categoryId;
     }
 
     public UUID getUserId() {
@@ -76,8 +76,8 @@
         return description;
     }
 
-    public String getCategoryName() {
-        return categoryName;
+    public UUID getCategoryId() {
+        return categoryId;
     }
 
     public Transaction toEntity() {
@@ -86,7 +86,7 @@
                 sum,
                 createTime,
                 description,
-                categoryName);
+                categoryId);
     }
 
     public static TransactionDto fromEntity(Transaction transaction) {
@@ -95,6 +95,6 @@
                 transaction.getSum(),
                 transaction.getCreateTime(),
                 transaction.getDescription(),
-                transaction.getCategoryName());
+                transaction.getCategoryId());
     }
 }
Index: src/main/java/ru/vsu/hb/persistence/repository/TransactionRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.vsu.hb.persistence.repository;\r\n\r\nimport org.springframework.data.domain.Example;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.domain.Sort;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.stereotype.Repository;\r\nimport ru.vsu.hb.persistence.entity.Transaction;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.UUID;\r\n\r\n@Repository\r\npublic interface TransactionRepository extends JpaRepository<Transaction, UUID>, TransactionCustomRepository {\r\n\r\n    Optional<Transaction> getByTransactionId(UUID transactionId);\r\n\r\n    @Override\r\n    Transaction save(Transaction transaction);\r\n\r\n    Integer deleteByTransactionId(UUID transactionId);\r\n\r\n    @Query(nativeQuery = true, value = \"SELECT (SELECT SUM(sum) FROM hb.transactions where user_id = ?1 and category_name is null) - (SELECT SUM(sum) FROM hb.transactions where user_id = ?1 and category_name is not null)\")\r\n    BigDecimal getBalance(UUID userId);\r\n\r\n    Page<Transaction> findByUser_UserIdAndCategoryName(UUID userId, String categoryName, Pageable pageable);\r\n\r\n    Page<Transaction> findByUser_UserIdAndCategoryNameIsNull(UUID userId, Pageable pageable);\r\n\r\n    Page<Transaction> findByUser_UserIdAndCategoryNameIsNotNull(UUID userId, Pageable pageable);\r\n\r\n    Page<Transaction> findByUser_UserId(UUID userId, Pageable pageable);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/vsu/hb/persistence/repository/TransactionRepository.java b/src/main/java/ru/vsu/hb/persistence/repository/TransactionRepository.java
--- a/src/main/java/ru/vsu/hb/persistence/repository/TransactionRepository.java	(revision 40c3eb409d0284e8a3740b0787221564ae4887d4)
+++ b/src/main/java/ru/vsu/hb/persistence/repository/TransactionRepository.java	(date 1650576015288)
@@ -24,14 +24,16 @@
 
     Integer deleteByTransactionId(UUID transactionId);
 
+    Integer deleteAllByCategoryId(UUID categoryId);
+
     @Query(nativeQuery = true, value = "SELECT (SELECT SUM(sum) FROM hb.transactions where user_id = ?1 and category_name is null) - (SELECT SUM(sum) FROM hb.transactions where user_id = ?1 and category_name is not null)")
     BigDecimal getBalance(UUID userId);
 
-    Page<Transaction> findByUser_UserIdAndCategoryName(UUID userId, String categoryName, Pageable pageable);
+    Page<Transaction> findByUser_UserIdAndCategoryId(UUID userId, UUID categoryId, Pageable pageable);
 
-    Page<Transaction> findByUser_UserIdAndCategoryNameIsNull(UUID userId, Pageable pageable);
+    Page<Transaction> findByUser_UserIdAndCategoryIdIsNull(UUID userId, Pageable pageable);
 
-    Page<Transaction> findByUser_UserIdAndCategoryNameIsNotNull(UUID userId, Pageable pageable);
+    Page<Transaction> findByUser_UserIdAndCategoryIdIsNotNull(UUID userId, Pageable pageable);
 
     Page<Transaction> findByUser_UserId(UUID userId, Pageable pageable);
 }
Index: src/main/java/ru/vsu/hb/controller/CategoryController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/vsu/hb/controller/CategoryController.java b/src/main/java/ru/vsu/hb/controller/CategoryController.java
new file mode 100644
--- /dev/null	(date 1650576015258)
+++ b/src/main/java/ru/vsu/hb/controller/CategoryController.java	(date 1650576015258)
@@ -0,0 +1,86 @@
+package ru.vsu.hb.controller;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.web.bind.annotation.*;
+import ru.vsu.hb.dto.CategoryDto;
+import ru.vsu.hb.dto.PageDto;
+import ru.vsu.hb.dto.TransactionDto;
+import ru.vsu.hb.dto.request.TransactionByCategoryRequest;
+import ru.vsu.hb.dto.request.TransactionListRequest;
+import ru.vsu.hb.dto.response.HBResponseData;
+import ru.vsu.hb.persistence.entity.Category;
+import ru.vsu.hb.service.CategoryService;
+import ru.vsu.hb.service.TransactionService;
+import ru.vsu.hb.utils.HBResponseBuilder;
+
+import java.math.BigDecimal;
+import java.util.UUID;
+
+import static ru.vsu.hb.security.SecurityConstants.HEADER_STRING;
+
+@PreAuthorize("hasAnyAuthority('USER')")
+@RestController
+@RequestMapping("/category")
+public class CategoryController {
+
+    @Autowired
+    private CategoryService service;
+
+    @PostMapping
+    public ResponseEntity<? super HBResponseData<? super CategoryDto>> addCategory(
+            @RequestBody CategoryDto category) {
+        return HBResponseBuilder.fromHBResult(service.addCategory(category)).build();
+    }
+
+    /*@PutMapping
+    public ResponseEntity<? super HBResponseData<? super CategoryDto>> updateCategory(
+            @RequestBody CategoryDto category) {
+        return HBResponseBuilder.fromHBResult(service.updateCategory(category))
+                .build();
+    }*/
+
+    @DeleteMapping
+    public ResponseEntity<? super HBResponseData<? super Integer>> removeCategory(
+            @RequestParam UUID transactionId) {
+        return HBResponseBuilder.fromHBResult(service.deleteByCategoryId(transactionId)).build();
+    }
+
+   /* @GetMapping("/{transactionId}")
+    public ResponseEntity<? super HBResponseData<? super TransactionDto>> getTransactionById(
+            @PathVariable UUID transactionId,
+            @RequestHeader(name = HEADER_STRING) String auth) {
+        return HBResponseBuilder.fromHBResult(service.getByTransactionId(transactionId))
+                .withAuthToken(auth)
+                .build();
+    }
+
+    @GetMapping("/balance")
+    public ResponseEntity<? super HBResponseData<? super BigDecimal>> getBalance(
+            @RequestParam UUID userId,
+            @RequestHeader(name = HEADER_STRING) String auth) {
+        return HBResponseBuilder.fromHBResult(service.getBalance(userId))
+                .withAuthToken(auth)
+                .build();
+    }
+
+    @PostMapping("/list")
+    public ResponseEntity<? super HBResponseData<? super PageDto<TransactionDto>>> getList(
+            @RequestBody TransactionListRequest request,
+            @RequestHeader(name = HEADER_STRING) String auth) {
+        return HBResponseBuilder.fromHBResult(service.getList(request))
+                .withAuthToken(auth)
+                .build();
+    }
+
+    @PostMapping("/byCategory")
+    public ResponseEntity<? super HBResponseData<? super PageDto<TransactionDto>>> getByCategory(
+            @RequestBody TransactionByCategoryRequest request,
+            @RequestHeader(name = HEADER_STRING) String auth) {
+        return HBResponseBuilder.fromHBResult(service.getByCategoryName(request))
+                .withAuthToken(auth)
+                .build();
+    }*/
+
+}
Index: src/main/java/ru/vsu/hb/dto/request/TransactionByCategoryRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.vsu.hb.dto.request;\r\n\r\nimport java.util.UUID;\r\n\r\npublic class TransactionByCategoryRequest {\r\n\r\n    private UUID userId;\r\n    private String categoryName;\r\n    private PageRequest page = new PageRequest();\r\n\r\n    public TransactionByCategoryRequest() {\r\n    }\r\n\r\n    public TransactionByCategoryRequest(UUID userId, String categoryName, PageRequest page) {\r\n        this.userId = userId;\r\n        this.categoryName = categoryName;\r\n        this.page = page;\r\n    }\r\n\r\n    public UUID getUserId() {\r\n        return userId;\r\n    }\r\n\r\n    public void setUserId(UUID userId) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public String getCategoryName() {\r\n        return categoryName;\r\n    }\r\n\r\n    public void setCategoryName(String categoryName) {\r\n        this.categoryName = categoryName;\r\n    }\r\n\r\n    public PageRequest getPage() {\r\n        return page;\r\n    }\r\n\r\n    public void setPage(PageRequest page) {\r\n        this.page = page;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/vsu/hb/dto/request/TransactionByCategoryRequest.java b/src/main/java/ru/vsu/hb/dto/request/TransactionByCategoryRequest.java
--- a/src/main/java/ru/vsu/hb/dto/request/TransactionByCategoryRequest.java	(revision 40c3eb409d0284e8a3740b0787221564ae4887d4)
+++ b/src/main/java/ru/vsu/hb/dto/request/TransactionByCategoryRequest.java	(date 1650576015250)
@@ -5,15 +5,15 @@
 public class TransactionByCategoryRequest {
 
     private UUID userId;
-    private String categoryName;
+    private UUID categoryId;
     private PageRequest page = new PageRequest();
 
     public TransactionByCategoryRequest() {
     }
 
-    public TransactionByCategoryRequest(UUID userId, String categoryName, PageRequest page) {
+    public TransactionByCategoryRequest(UUID userId, UUID categoryId, PageRequest page) {
         this.userId = userId;
-        this.categoryName = categoryName;
+        this.categoryId = categoryId;
         this.page = page;
     }
 
@@ -25,12 +25,12 @@
         this.userId = userId;
     }
 
-    public String getCategoryName() {
-        return categoryName;
+    public UUID getCategoryId() {
+        return categoryId;
     }
 
-    public void setCategoryName(String categoryName) {
-        this.categoryName = categoryName;
+    public void setCategoryId(UUID categoryId) {
+        this.categoryId = categoryId;
     }
 
     public PageRequest getPage() {
Index: src/main/resources/application.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>server:\r\n  port: 8080\r\nspring:\r\n  application:\r\n    name: household-budget-service\r\n  mvc:\r\n    pathmatch:\r\n      matching-strategy: ant_path_matcher\r\n  datasource:\r\n    url: jdbc:postgresql://localhost:5432/postgres\r\n    username: postgres\r\n    password: 123456\r\n    jpa:\r\n      open-in-view: on\r\n      hibernate:\r\n        ddl-auto: validate\r\n      show-sql: true\r\n  liquibase:\r\n    change-log: classpath:db/migration/v1/changelog.yaml
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/application.yaml b/src/main/resources/application.yaml
--- a/src/main/resources/application.yaml	(revision 40c3eb409d0284e8a3740b0787221564ae4887d4)
+++ b/src/main/resources/application.yaml	(date 1650576071068)
@@ -9,7 +9,7 @@
   datasource:
     url: jdbc:postgresql://localhost:5432/postgres
     username: postgres
-    password: 123456
+    password: 12345678
     jpa:
       open-in-view: on
       hibernate:
Index: src/main/resources/db/migration/v1/1.0/BOK-001-202204070009.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>create schema hb;\r\n\r\ncreate table hb.users\r\n(\r\n    user_id    uuid        not null\r\n        primary key,\r\n    email      varchar(50) not null\r\n        unique,\r\n    password   varchar(60) not null,\r\n    first_name varchar(50)\r\n);\r\n\r\ncreate table hb.users_categories\r\n(\r\n    user_id       uuid                  not null\r\n        references hb.users,\r\n    category_name varchar(30)           not null,\r\n    is_default    boolean default false not null,\r\n    primary key (user_id, category_name)\r\n);\r\n\r\ncreate table hb.transactions\r\n(\r\n    transaction_id uuid                                not null\r\n        primary key,\r\n    sum            numeric                             not null,\r\n    create_time    timestamp default CURRENT_TIMESTAMP not null,\r\n    user_id        uuid                                not null\r\n        references hb.users,\r\n    category_name  varchar(50),\r\n    description    text\r\n);\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/db/migration/v1/1.0/BOK-001-202204070009.sql b/src/main/resources/db/migration/v1/1.0/BOK-001-202204070009.sql
--- a/src/main/resources/db/migration/v1/1.0/BOK-001-202204070009.sql	(revision 40c3eb409d0284e8a3740b0787221564ae4887d4)
+++ b/src/main/resources/db/migration/v1/1.0/BOK-001-202204070009.sql	(date 1650574962529)
@@ -14,9 +14,10 @@
 (
     user_id       uuid                  not null
         references hb.users,
+    category_id   uuid                  not null,
     category_name varchar(30)           not null,
     is_default    boolean default false not null,
-    primary key (user_id, category_name)
+    primary key (user_id, category_id)
 );
 
 create table hb.transactions
@@ -27,7 +28,7 @@
     create_time    timestamp default CURRENT_TIMESTAMP not null,
     user_id        uuid                                not null
         references hb.users,
-    category_name  varchar(50),
+    category_id    uuid,
     description    text
 );
 
Index: src/main/java/ru/vsu/hb/dto/CategoryDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/vsu/hb/dto/CategoryDto.java b/src/main/java/ru/vsu/hb/dto/CategoryDto.java
new file mode 100644
--- /dev/null	(date 1650574962463)
+++ b/src/main/java/ru/vsu/hb/dto/CategoryDto.java	(date 1650574962463)
@@ -0,0 +1,71 @@
+package ru.vsu.hb.dto;
+
+import ru.vsu.hb.persistence.entity.Category;
+import ru.vsu.hb.persistence.entity.UserCategoryId;
+
+import java.util.UUID;
+
+public class CategoryDto {
+
+    private UUID categoryId;
+    private UUID userId;
+    private Boolean isDefault;
+    private String categoryName;
+
+    public CategoryDto(UUID categoryId, UUID userId, Boolean isDefault, String categoryName) {
+        this.userId = userId;
+        this.isDefault = isDefault;
+        this.categoryName = categoryName;
+        this.categoryId = categoryId;
+    }
+
+    public UUID getUserId() {
+        return userId;
+    }
+
+    public void setUserId(UUID userId) {
+        this.userId = userId;
+    }
+
+    public Boolean getDefault() {
+        return isDefault;
+    }
+
+    public void setDefault(Boolean aDefault) {
+        isDefault = aDefault;
+    }
+
+    public String getCategoryName() {
+        return categoryName;
+    }
+
+    public void setCategoryName(String categoryName) {
+        this.categoryName = categoryName;
+    }
+
+    public UUID getCategoryId() {
+        return categoryId;
+    }
+
+    public void setCategoryId(UUID categoryId) {
+        this.categoryId = categoryId;
+    }
+
+    public Category toEntity() {
+        UserCategoryId userCategoryId = new UserCategoryId();
+        userCategoryId.setCategoryId(categoryId);
+        userCategoryId.setUserId(userId);
+        Category category = new Category();
+        category.setUserCategoryId(userCategoryId);
+        category.setDefault(isDefault);
+        category.setCategoryName(categoryName);
+        return category;
+    }
+
+    public static CategoryDto fromEntity(Category category) {
+        return new CategoryDto(category.getUserCategoryId().getCategoryId(),
+                category.getUserCategoryId().getUserId(),
+                category.getDefault(),
+                category.getCategoryName());
+    }
+}
Index: src/main/java/ru/vsu/hb/persistence/entity/Category.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.vsu.hb.persistence.entity;\r\n\r\nimport javax.persistence.*;\r\n\r\n@Entity\r\n@Table(schema = \"hb\", name = \"users_categories\")\r\npublic class Category {\r\n\r\n    @EmbeddedId\r\n    private UserCategoryId userCategoryId;\r\n\r\n    @Column(name = \"is_default\")\r\n    private Boolean isDefault;\r\n\r\n    public UserCategoryId getUserCategoryId() {\r\n        return userCategoryId;\r\n    }\r\n\r\n    public void setUserCategoryId(UserCategoryId userCategoryId) {\r\n        this.userCategoryId = userCategoryId;\r\n    }\r\n\r\n    public Boolean getDefault() {\r\n        return isDefault;\r\n    }\r\n\r\n    public void setDefault(Boolean aDefault) {\r\n        isDefault = aDefault;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/vsu/hb/persistence/entity/Category.java b/src/main/java/ru/vsu/hb/persistence/entity/Category.java
--- a/src/main/java/ru/vsu/hb/persistence/entity/Category.java	(revision 40c3eb409d0284e8a3740b0787221564ae4887d4)
+++ b/src/main/java/ru/vsu/hb/persistence/entity/Category.java	(date 1650574962499)
@@ -12,6 +12,16 @@
     @Column(name = "is_default")
     private Boolean isDefault;
 
+    private String categoryName;
+
+    public String getCategoryName() {
+        return categoryName;
+    }
+
+    public void setCategoryName(String categoryName) {
+        this.categoryName = categoryName;
+    }
+
     public UserCategoryId getUserCategoryId() {
         return userCategoryId;
     }
Index: src/main/java/ru/vsu/hb/persistence/entity/UserCategoryId.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.vsu.hb.persistence.entity;\r\n\r\nimport javax.persistence.Column;\r\nimport javax.persistence.ManyToOne;\r\nimport java.io.Serializable;\r\nimport java.util.Objects;\r\nimport java.util.UUID;\r\n\r\npublic class UserCategoryId implements Serializable {\r\n\r\n    @Column(name = \"user_id\")\r\n    private UUID userId;\r\n\r\n    @Column(name = \"category_name\")\r\n    private String categoryName;\r\n\r\n    public UserCategoryId(UUID userId, String categoryName) {\r\n        this.userId = userId;\r\n        this.categoryName = categoryName;\r\n    }\r\n\r\n    public UserCategoryId() {\r\n    }\r\n\r\n    public UUID getUserId() {\r\n        return userId;\r\n    }\r\n\r\n    public void setUserId(UUID userId) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public String getCategoryName() {\r\n        return categoryName;\r\n    }\r\n\r\n    public void setCategoryName(String categoryName) {\r\n        this.categoryName = categoryName;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o) return true;\r\n        if (o == null || getClass() != o.getClass()) return false;\r\n\r\n        UserCategoryId that = (UserCategoryId) o;\r\n\r\n        if (!Objects.equals(userId, that.userId)) return false;\r\n        return Objects.equals(categoryName, that.categoryName);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        int result = userId != null ? userId.hashCode() : 0;\r\n        result = 31 * result + (categoryName != null ? categoryName.hashCode() : 0);\r\n        return result;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/vsu/hb/persistence/entity/UserCategoryId.java b/src/main/java/ru/vsu/hb/persistence/entity/UserCategoryId.java
--- a/src/main/java/ru/vsu/hb/persistence/entity/UserCategoryId.java	(revision 40c3eb409d0284e8a3740b0787221564ae4887d4)
+++ b/src/main/java/ru/vsu/hb/persistence/entity/UserCategoryId.java	(date 1650574962451)
@@ -1,7 +1,6 @@
 package ru.vsu.hb.persistence.entity;
 
 import javax.persistence.Column;
-import javax.persistence.ManyToOne;
 import java.io.Serializable;
 import java.util.Objects;
 import java.util.UUID;
@@ -11,12 +10,12 @@
     @Column(name = "user_id")
     private UUID userId;
 
-    @Column(name = "category_name")
-    private String categoryName;
+    @Column(name = "category_id")
+    private UUID categoryId;
 
-    public UserCategoryId(UUID userId, String categoryName) {
+    public UserCategoryId(UUID userId, UUID categoryId) {
         this.userId = userId;
-        this.categoryName = categoryName;
+        this.categoryId = categoryId;
     }
 
     public UserCategoryId() {
@@ -30,12 +29,12 @@
         this.userId = userId;
     }
 
-    public String getCategoryName() {
-        return categoryName;
+    public UUID getCategoryId() {
+        return categoryId;
     }
 
-    public void setCategoryName(String categoryName) {
-        this.categoryName = categoryName;
+    public void setCategoryId(UUID categoryId) {
+        this.categoryId = categoryId;
     }
 
     @Override
@@ -46,13 +45,13 @@
         UserCategoryId that = (UserCategoryId) o;
 
         if (!Objects.equals(userId, that.userId)) return false;
-        return Objects.equals(categoryName, that.categoryName);
+        return Objects.equals(categoryId, that.categoryId);
     }
 
     @Override
     public int hashCode() {
         int result = userId != null ? userId.hashCode() : 0;
-        result = 31 * result + (categoryName != null ? categoryName.hashCode() : 0);
+        result = 31 * result + (categoryId != null ? categoryId.hashCode() : 0);
         return result;
     }
 }
Index: src/main/java/ru/vsu/hb/persistence/entity/Transaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.vsu.hb.persistence.entity;\r\n\r\nimport org.hibernate.annotations.DynamicInsert;\r\nimport org.hibernate.annotations.DynamicUpdate;\r\nimport org.hibernate.annotations.Generated;\r\nimport org.hibernate.annotations.GenerationTime;\r\n\r\nimport javax.persistence.*;\r\nimport java.math.BigDecimal;\r\nimport java.time.LocalDateTime;\r\nimport java.util.UUID;\r\n\r\n@Entity(name = \"transactions\")\r\n@Table(schema = \"hb\", name = \"transactions\")\r\npublic class Transaction {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    @Column(name = \"transaction_id\")\r\n    private UUID transactionId;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(\r\n            name = \"user_id\",\r\n            referencedColumnName = \"user_id\",\r\n            insertable = false,\r\n            updatable = false\r\n    )\r\n    private User user;\r\n\r\n    @Column(name = \"user_id\", updatable = false)\r\n    private UUID userId;\r\n\r\n    @Column(name = \"sum\")\r\n    private BigDecimal sum;\r\n\r\n    @Column(name = \"create_time\")\r\n    @Generated(GenerationTime.INSERT)\r\n    private LocalDateTime createTime;\r\n\r\n    @Column(name = \"description\")\r\n    private String description;\r\n\r\n    @Column(name = \"category_name\")\r\n    private String categoryName;\r\n\r\n    public Transaction() {\r\n    }\r\n\r\n    public Transaction(UUID transactionId, UUID userId, BigDecimal sum, LocalDateTime createTime, String description, String categoryName) {\r\n        this.transactionId = transactionId;\r\n        this.userId = userId;\r\n        this.sum = sum;\r\n        this.createTime = createTime;\r\n        this.description = description;\r\n        this.categoryName = categoryName;\r\n    }\r\n\r\n\r\n    public UUID getUserId() {\r\n        return userId;\r\n    }\r\n\r\n    public void setUserId(UUID userId) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public UUID getTransactionId() {\r\n        return transactionId;\r\n    }\r\n\r\n    public void setTransactionId(UUID transaction_id) {\r\n        this.transactionId = transaction_id;\r\n    }\r\n\r\n    public User getUser() {\r\n        return user;\r\n    }\r\n\r\n    public void setUser(User user) {\r\n        this.user = user;\r\n    }\r\n\r\n    public BigDecimal getSum() {\r\n        return sum;\r\n    }\r\n\r\n    public void setSum(BigDecimal sum) {\r\n        this.sum = sum;\r\n    }\r\n\r\n    public LocalDateTime getCreateTime() {\r\n        return createTime;\r\n    }\r\n\r\n    public void setCreateTime(LocalDateTime createTime) {\r\n        this.createTime = createTime;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    public String getCategoryName() {\r\n        return categoryName;\r\n    }\r\n\r\n    public void setCategoryName(String categoryName) {\r\n        this.categoryName = categoryName;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/vsu/hb/persistence/entity/Transaction.java b/src/main/java/ru/vsu/hb/persistence/entity/Transaction.java
--- a/src/main/java/ru/vsu/hb/persistence/entity/Transaction.java	(revision 40c3eb409d0284e8a3740b0787221564ae4887d4)
+++ b/src/main/java/ru/vsu/hb/persistence/entity/Transaction.java	(date 1650576015228)
@@ -1,7 +1,5 @@
 package ru.vsu.hb.persistence.entity;
 
-import org.hibernate.annotations.DynamicInsert;
-import org.hibernate.annotations.DynamicUpdate;
 import org.hibernate.annotations.Generated;
 import org.hibernate.annotations.GenerationTime;
 
@@ -41,19 +39,19 @@
     @Column(name = "description")
     private String description;
 
-    @Column(name = "category_name")
-    private String categoryName;
+    @Column(name = "category_id")
+    private UUID categoryId;
 
     public Transaction() {
     }
 
-    public Transaction(UUID transactionId, UUID userId, BigDecimal sum, LocalDateTime createTime, String description, String categoryName) {
+    public Transaction(UUID transactionId, UUID userId, BigDecimal sum, LocalDateTime createTime, String description, UUID categoryId) {
         this.transactionId = transactionId;
         this.userId = userId;
         this.sum = sum;
         this.createTime = createTime;
         this.description = description;
-        this.categoryName = categoryName;
+        this.categoryId = categoryId;
     }
 
 
@@ -105,11 +103,11 @@
         this.description = description;
     }
 
-    public String getCategoryName() {
-        return categoryName;
+    public UUID getCategoryId() {
+        return categoryId;
     }
 
-    public void setCategoryName(String categoryName) {
-        this.categoryName = categoryName;
+    public void setCategoryId(UUID categoryId) {
+        this.categoryId = categoryId;
     }
 }
Index: src/main/java/ru/vsu/hb/persistence/repository/CategoryRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.vsu.hb.persistence.repository;\r\n\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\nimport ru.vsu.hb.persistence.entity.Category;\r\nimport ru.vsu.hb.persistence.entity.UserCategoryId;\r\n\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.UUID;\r\n\r\n@Repository\r\npublic interface CategoryRepository extends JpaRepository<Category, UserCategoryId> {\r\n\r\n    Optional<Category> getByUserCategoryId(UserCategoryId userCategoryId);\r\n\r\n    List<Category> getByUserCategoryId_UserId(UUID userId);\r\n\r\n    @Override\r\n    Category save(Category category);\r\n\r\n    void deleteByUserCategoryId(UserCategoryId userCategoryId);\r\n\r\n    void deleteByUserCategoryId_UserId(UUID userId);\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/vsu/hb/persistence/repository/CategoryRepository.java b/src/main/java/ru/vsu/hb/persistence/repository/CategoryRepository.java
--- a/src/main/java/ru/vsu/hb/persistence/repository/CategoryRepository.java	(revision 40c3eb409d0284e8a3740b0787221564ae4887d4)
+++ b/src/main/java/ru/vsu/hb/persistence/repository/CategoryRepository.java	(date 1650576015275)
@@ -19,7 +19,7 @@
     @Override
     Category save(Category category);
 
-    void deleteByUserCategoryId(UserCategoryId userCategoryId);
+    Integer deleteByUserCategoryId_CategoryId(UUID categoryId);
 
     void deleteByUserCategoryId_UserId(UUID userId);
 
@@ -27,5 +27,4 @@
 
 
 
-
 }
